
package proyectogrupo6.Vistas;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import proyectogrupo6.Modelos.Alumno;
import proyectogrupo6.Modelos.Cursada;
import proyectogrupo6.Modelos.Materia;
import proyectogrupo6.control.AlumnoData;
import proyectogrupo6.control.Conexion;
import proyectogrupo6.control.CursadaData;
import proyectogrupo6.control.MateriaData;

/**
 * @author Grupo 6 
 *  Fernandez Valentina
 *  Amieva Agustina
 *  Romero Jorge
 *  Gutierrez Manuel
 */
public class CursadaView extends javax.swing.JInternalFrame {

    /**
     * Creates new form CursadaView
     */
    //------------------Constructor------------------
    public CursadaView(Conexion conexion) {
        initComponents();
        modelo = new DefaultTableModel();
        conexion = new Conexion();
        cd = new CursadaData(conexion);
        ad = new AlumnoData(conexion);
        md = new MateriaData(conexion);
        this.jbBorrar.setEnabled(false);
        this.jbInscribir.setEnabled(false);
        llenarJcbAlumno();
        armarCabeceraJt();
    }

    //------------------ArmarCabeceraTabla------------------ 
    //(esta parte tecnicamente no la necesitamos porque seteamos la table desde el design, pero de todas formas dejo como seria por codigo!)
    private void armarCabeceraJt() {
        //debe recibir la conexion por parametro!!
        ArrayList<Object> c = new ArrayList();
        c.add("ID");
        c.add("NOMBRE");
        c.add("AÑO");
        for (Object it : c) {
            modelo.addColumn(it);
            
        }
        this.jtMaterias.setModel(modelo);
    }

    //------------------BorrarFilasTabla------------------
    private void borrarFilasJt() {
        int a = modelo.getRowCount() - 1;
        for (int i = a; i >= 0; i--) {
            modelo.removeRow(i);
        }
    }

    //------------------LlenarTabla------------------
    private void llenarTable(ArrayList<Materia> materias) {
        borrarFilasJt();
        //modelo.setRowCount(0); tambien se pueden borrar las filas de esta manera
        for (Materia m : materias) {
            modelo.addRow(new Object[]{
                m.getIdMateria(), m.getNombre(), m.getAnio()
            });
        }
    }

    //------------------LlenarTablaSegunRadioButton------------------
    private void llenarTableIfJrb() {
        if (this.jrbGroup.isSelected(jrbInscriptas.getModel())) {
            llenarTable((ArrayList<Materia>) cd.obtenerMateriasInscriptas((Alumno) this.jcbAlumno.getSelectedItem()));
        } else if (this.jrbGroup.isSelected(jrbNoInscriptas.getModel())) {
            llenarTable((ArrayList<Materia>) cd.obtenerMateriasNoInscriptas((Alumno) this.jcbAlumno.getSelectedItem()));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jrbGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jcbAlumno = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jrbInscriptas = new javax.swing.JRadioButton();
        jrbNoInscriptas = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtMaterias = new javax.swing.JTable();
        jbInscribir = new javax.swing.JButton();
        jbBorrar = new javax.swing.JButton();
        jbSalir = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Formulario de Inscripcion");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("ALUMNO");

        jcbAlumno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbAlumnoActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("LISTADO DE MATERIAS");

        jrbGroup.add(jrbInscriptas);
        jrbInscriptas.setText("INSCRIPTAS");
        jrbInscriptas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbInscriptasActionPerformed(evt);
            }
        });

        jrbGroup.add(jrbNoInscriptas);
        jrbNoInscriptas.setText("NO INSCRIPTAS");
        jrbNoInscriptas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbNoInscriptasActionPerformed(evt);
            }
        });

        jtMaterias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "NOMBRE", "AÑO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtMaterias.setShowHorizontalLines(false);
        jtMaterias.setShowVerticalLines(false);
        jtMaterias.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jtMaterias);
        if (jtMaterias.getColumnModel().getColumnCount() > 0) {
            jtMaterias.getColumnModel().getColumn(0).setResizable(false);
            jtMaterias.getColumnModel().getColumn(1).setResizable(false);
            jtMaterias.getColumnModel().getColumn(2).setResizable(false);
        }

        jbInscribir.setText("Inscribir");
        jbInscribir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbInscribirActionPerformed(evt);
            }
        });

        jbBorrar.setText("Borrar");
        jbBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBorrarActionPerformed(evt);
            }
        });

        jbSalir.setText("Salir");
        jbSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(jLabel1))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jcbAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(130, 130, 130)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(jrbInscriptas)
                .addGap(65, 65, 65)
                .addComponent(jrbNoInscriptas))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jbInscribir)
                .addGap(57, 57, 57)
                .addComponent(jbBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(jbSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jrbInscriptas)
                    .addComponent(jrbNoInscriptas))
                .addGap(7, 7, 7)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbInscribir)
                    .addComponent(jbBorrar)
                    .addComponent(jbSalir)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //------------------SalirButton------------------
    private void jbSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalirActionPerformed
        dispose();
    }//GEN-LAST:event_jbSalirActionPerformed

    //------------------LlenarComboBoxAlumno------------------
    private void llenarJcbAlumno() {
        ArrayList<Alumno> alumnos = ad.obtenerAlumnos();
        Collections.sort(alumnos, new Comparator<Alumno>() {
            @Override
            public int compare(Alumno t, Alumno t1) {
                return t.getApellido().compareTo(t1.getApellido());
            }
        });
        alumnos.forEach((a) -> {
            jcbAlumno.addItem(a);
        });
    }

    //------------------JcbAlumno------------------
    private void jcbAlumnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbAlumnoActionPerformed
        llenarTableIfJrb();
    }//GEN-LAST:event_jcbAlumnoActionPerformed

    //------------------InscribirButton------------------
    private void jbInscribirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbInscribirActionPerformed
        if (jtMaterias.getSelectedRow() != -1) {
            int id = (int) modelo.getValueAt(jtMaterias.getSelectedRow(), 0);
            Alumno alumno = (Alumno) jcbAlumno.getSelectedItem();
            Materia materia = md.obtenerMateriaXId(id);
            Cursada c = new Cursada(materia, alumno, 0);
            if (cd.agregarCursada(c)) {
                JOptionPane.showMessageDialog(this, "Se ha realizado la inscripcion de " + alumno.getNombre() + " " + alumno.getApellido() + " en la materia " + md.obtenerMateriaXId(id).getNombre() + ".");
                llenarTableIfJrb();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una materia para inscribirse!");
        }
    }//GEN-LAST:event_jbInscribirActionPerformed

    //------------------RadioButtonInscriptas------------------
    private void jrbInscriptasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbInscriptasActionPerformed
        llenarTableIfJrb();
        this.jbBorrar.setEnabled(true);
        this.jbInscribir.setEnabled(false);
    }//GEN-LAST:event_jrbInscriptasActionPerformed

    //------------------RadioButtonNoInscriptas------------------
    private void jrbNoInscriptasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbNoInscriptasActionPerformed
        llenarTableIfJrb();
        this.jbBorrar.setEnabled(false);
        this.jbInscribir.setEnabled(true);
    }//GEN-LAST:event_jrbNoInscriptasActionPerformed

    //------------------BorrarButton--------------------
    private void jbBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBorrarActionPerformed
        if (this.jtMaterias.getSelectedRow() != -1) {
            int id = (int) this.jtMaterias.getValueAt(jtMaterias.getSelectedRow(), 0);
            Alumno alumno = (Alumno) this.jcbAlumno.getSelectedItem();
            if (cd.borrarCursada(alumno, md.obtenerMateriaXId(id))) {
                JOptionPane.showMessageDialog(this, "Se ha eliminado la materia " + md.obtenerMateriaXId(id).getNombre());
                llenarTableIfJrb();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una materia para eliminarla!");
        }
    }//GEN-LAST:event_jbBorrarActionPerformed

    //------------------Atributos------------------
    private DefaultTableModel modelo;
    private MateriaData md;
    private AlumnoData ad;
    private CursadaData cd;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbBorrar;
    private javax.swing.JButton jbInscribir;
    private javax.swing.JButton jbSalir;
    private javax.swing.JComboBox<Alumno> jcbAlumno;
    private javax.swing.ButtonGroup jrbGroup;
    private javax.swing.JRadioButton jrbInscriptas;
    private javax.swing.JRadioButton jrbNoInscriptas;
    private javax.swing.JTable jtMaterias;
    // End of variables declaration//GEN-END:variables
}
